/*! For license information please see appless-mobile.min.js.LICENSE.txt */
(()=>{"use strict";var e={d:(t,a)=>{for(var r in a)e.o(a,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:a[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},t={};e.d(t,{default:()=>o});class a{#e;constructor(){if("undefined"==typeof window&&"undefined"==typeof self)this.#t();else try{this.#e=window?.crypto,this.#e.CryptoKey=window?.CryptoKey}catch(e){this.#e=self?.crypto,this.#e.CryptoKey=self?.CryptoKey}}#t=async()=>{this.#e=await Object.getPrototypeOf((async function(){})).constructor('\n      return await import( "crypto" ).then((m) => {return m.default.webcrypto});\n')()};#a=async e=>{await new Promise(((t,a)=>{setTimeout((()=>t(!0)),e)}))};base64ToArray(e){return Uint8Array.from(atob(e),(e=>e.charCodeAt(0)))}arrayToBase64(e){return btoa(String.fromCharCode(...e))}HMAC=async(e,t)=>{await this.#a(0);let a=new TextEncoder("utf-8"),r=a.encode(e),s=a.encode(t),i=await this.#e.subtle.importKey("raw",r,{name:"HMAC",hash:{name:"SHA-256"}},!1,["sign","verify"]),n=await this.#e.subtle.sign("HMAC",i,s),o=new Uint8Array(n);return Array.prototype.map.call(o,(e=>("00"+e.toString(16)).slice(-2))).join("")};HASH=async(e,t,a)=>{await this.#a(0);let r,s=await this.#e.subtle.digest(e,(new TextEncoder).encode(t)),i=new Uint8Array(s);if(a){r=new Uint8Array(a,0),Math.min(a,i.length);let e=Math.max(a,i.length);for(var n=0;n<e;n++)r[n%a]=r[n%a]^i[n%i.length]}else r=i;return this.arrayToBase64(new Uint8Array(r))};PASSWORD_ENCRYPT=async(e,t)=>{await this.#a(0);for(let t=0;t<1e4;t++)e=this.HASH("SHA-512",e);let a=btoa(e),r=await this.AESMakeKey(!0),s=await this.AESEncrypt(r,t,a);return btoa(JSON.stringify({ciphertext:s.ciphertext,aes:r}))};PASSWORD_DECRYPT=async(e,t)=>{await this.#a(0);for(let t=0;t<1e4;t++)e=this.HASH("SHA-512",e);let a=btoa(e),r=JSON.parse(atob(t)),s=await this.AESImportKey(r.aes,!1),i=r.ciphertext;return await this.AESDecrypt(s,a,i,!0)};AESMakeKey=async(e=!0)=>{await this.#a(0);let t=await this.#e.subtle.generateKey({name:"AES-GCM",length:256},e,["encrypt","decrypt"]);if(e){let e=await this.#e.subtle.exportKey("raw",t);return this.arrayToBase64(new Uint8Array(e))}return t};AESImportKey=async(e,t=!0)=>(await this.#a(0),e instanceof this.#e.CryptoKey?e:await this.#e.subtle.importKey("raw",this.base64ToArray(e).buffer,"AES-GCM",t,["encrypt","decrypt"]));async AESEncrypt(e,t,a=!1){await this.#a(0);let r,s=await this.AESImportKey(e);r=a?this.base64ToArray(a):this.#e.getRandomValues(new Uint8Array(16));let i=await this.#e.subtle.encrypt({name:"AES-GCM",iv:r},s,this.base64ToArray(t));return{ciphertext:this.arrayToBase64(new Uint8Array(i)),iv:this.arrayToBase64(r)}}async AESDecrypt(e,t,a,r=!1){await this.#a(0);let s,i=await this.AESImportKey(e),n=this.base64ToArray(t),o=this.base64ToArray(a);return s=await this.#e.subtle.decrypt({name:"AES-GCM",iv:n},i,o),r?(s=new Uint8Array(s),s=(new TextDecoder).decode(s),s):s}EcMakeCryptKeys=async(e=!0)=>{await this.#a(0);let t,a=await this.#e.subtle.generateKey({name:"ECDH",namedCurve:"P-256"},e,["deriveKey","deriveBits"]);return t=e?await Promise.all([this.#e.subtle.exportKey("spki",a.publicKey).then((e=>this.arrayToBase64(new Uint8Array(e)))),this.#e.subtle.exportKey("pkcs8",a.privateKey).then((e=>this.arrayToBase64(new Uint8Array(e)))),this.#e.subtle.exportKey("jwk",a.publicKey).then((e=>e)),this.#e.subtle.exportKey("jwk",a.privateKey).then((e=>e)),this.#e.subtle.exportKey("raw",a.publicKey).then((e=>this.arrayToBase64(new Uint8Array(e)))),this.#e.subtle.exportKey("raw",a.publicKey).then((e=>this.arrayToBase64(new Uint8Array(e).slice(1,1e3))))]):await Promise.all([this.#e.subtle.exportKey("spki",a.publicKey).then((e=>this.arrayToBase64(new Uint8Array(e)))),new Promise(((e,t)=>e(a.privateKey))),this.#e.subtle.exportKey("raw",a.publicKey).then((e=>this.arrayToBase64(new Uint8Array(e)))),this.#e.subtle.exportKey("raw",a.publicKey).then((e=>this.arrayToBase64(new Uint8Array(e).slice(1,1e3))))]),e?{publicKey:t[0],privateKey:t[1],jwkPublicKey:t[2],jwkPrivateKey:t[3],rawPublicKey:t[4],rawPublicKeyLite:t[5]}:{publicKey:t[0],privateKey:t[1],rawPublicKey:t[2],rawPublicKeyLite:t[3]}};EcEncrypt=async(e,t,a)=>{await this.#a(0);let r=await this.EcdhConvertKey(t),s=await this.EcdhConvertKey(e);return await this.#e.subtle.deriveKey({name:"ECDH",public:r},s,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"]),await this.AESEncrypt(b64_aes_key,a)};EcDecrypt=async(e,t,a,r)=>{let s=await this.EcdhConvertKey(t),i=await this.EcdhConvertKey(e),n=this.base64ToArray(a),o=this.base64ToArray(r),c=await this.#e.subtle.deriveKey({name:"ECDH",public:s},i,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"]);return await this.#e.subtle.decrypt({name:"AES-GCM",iv:n},c,o)};HKDFEncrypt=async(e,t,a)=>{await this.#a(0);let r=await this.EcdhConvertKey(t),s=await this.EcdhConvertKey(e),i=await this.#e.subtle.deriveBits({name:"ECDH",namedCurve:"P-256",public:r},s,256),n=await this.#e.subtle.importKey("raw",i,{name:"HKDF"},!1,["deriveKey","deriveBits"]),o=this.#e.getRandomValues(new Uint8Array(16)),c=await this.#e.subtle.deriveBits({name:"HKDF",hash:"SHA-256",salt:o,info:new Uint8Array([])},n,256),y=await this.#e.subtle.importKey("raw",c,"AES-GCM",!1,["encrypt","decrypt"]),l=this.#e.getRandomValues(new Uint8Array(16)),h=await this.#e.subtle.encrypt({name:"AES-GCM",iv:l},y,this.base64ToArray(a));return{ciphertext:this.arrayToBase64(new Uint8Array(h)),salt:this.arrayToBase64(o),iv:this.arrayToBase64(l)}};HKDFDecrypt=async(e,t,a,r,s)=>{await this.#a(0);let i,n=await this.EcdhConvertKey(t),o=await this.EcdhConvertKey(e),c=this.base64ToArray(a),y=this.base64ToArray(r),l=this.base64ToArray(s),h=await this.#e.subtle.deriveBits({name:"ECDH",namedCurve:"P-256",public:n},o,256),p=await this.#e.subtle.importKey("raw",h,{name:"HKDF"},!1,["deriveKey","deriveBits"]),u=await this.#e.subtle.deriveBits({name:"HKDF",hash:"SHA-256",salt:c,info:new Uint8Array([])},p,256),w=await this.#e.subtle.importKey("raw",u,"AES-GCM",!1,["encrypt","decrypt"]);try{i=await this.#e.subtle.decrypt({name:"AES-GCM",iv:y},w,l)}catch(e){console.log({name:e.name,stack:e.stack,message:e.message})}return i};EcMakeSigKeys=async(e=!0)=>{await this.#a(0);let t,a=await this.#e.subtle.generateKey({name:"ECDSA",namedCurve:"P-256"},e,["sign","verify"]);return e?(t=await Promise.all([this.#e.subtle.exportKey("spki",a.publicKey).then((e=>this.arrayToBase64(new Uint8Array(e)))),this.#e.subtle.exportKey("pkcs8",a.privateKey).then((e=>this.arrayToBase64(new Uint8Array(e))))]),{publicKey:t[0],privateKey:t[1]}):(t=await Promise.all([this.#e.subtle.exportKey("spki",a.publicKey).then((e=>this.arrayToBase64(new Uint8Array(e))))]),{publicKey:t[0],privateKey:a.privateKey})};EcSignData=async(e,t)=>{await this.#a(0);let a=await this.EcdsaConvertKey(e),r=await this.#e.subtle.sign({name:"ECDSA",hash:{name:"SHA-256"}},a,this.base64ToArray(t));return await this.arrayToBase64(new Uint8Array(r))};EcVerifySig=async(e,t,a)=>{await this.#a(0);let r=await this.EcdsaConvertKey(e),s=this.base64ToArray(t);return await this.#e.subtle.verify({name:"ECDSA",hash:{name:"SHA-256"}},r,s,this.base64ToArray(a))};EcdhConvertKey=async e=>{let t,a;if(await this.#a(0),e instanceof this.#e.CryptoKey)return e;try{return t=await this.#e.subtle.importKey("spki",this.base64ToArray(e),{name:"ECDH",namedCurve:"P-256"},!0,[]),t}catch(e){}try{return t=await this.#e.subtle.importKey("raw",this.base64ToArray(e),{name:"ECDH",namedCurve:"P-256"},!0,[]),t}catch(e){}try{return t=await this.#e.subtle.importKey("pkcs8",this.base64ToArray(e),{name:"ECDH",namedCurve:"P-256"},!1,["deriveKey","deriveBits"]),t}catch(e){}try{return a=new Uint8Array([4].concat(Array.from(this.base64ToArray(e)))),t=await this.#e.subtle.importKey("raw",a,{name:"ECDH",namedCurve:"P-256"},!0,[]),t}catch(e){throw new Error("UNRECOGNIZED KEY FORMAT")}};EcdsaConvertKey=async e=>{let t,a;if(await this.#a(0),e instanceof this.#e.CryptoKey)return e;try{return t=await this.#e.subtle.importKey("spki",this.base64ToArray(e),{name:"ECDSA",namedCurve:"P-256"},!0,["verify"]),t}catch(e){}try{return t=await this.#e.subtle.importKey("raw",this.base64ToArray(e),{name:"ECDSA",namedCurve:"P-256"},!0,["verify"]),t}catch(e){}try{return t=await this.#e.subtle.importKey("pkcs8",this.base64ToArray(e),{name:"ECDSA",namedCurve:"P-256"},!1,["sign"]),t}catch(e){}try{return a=new Uint8Array([4].concat(Array.from(this.base64ToArray(e)))),t=await this.#e.subtle.importKey("raw",a,{name:"ECDSA",namedCurve:"P-256"},!0,["sign"]),t}catch(e){throw new Error("UNRECOGNIZED KEY FORMAT")}}}class r{#r;#s;start=async(e,t,a)=>new Promise(((r,s)=>{try{const i=indexedDB.open(e,1);i.onerror=e=>{s(e)},i.onupgradeneeded=async e=>{this.#r=e.target.result;const r=this.#r.createObjectStore(t,{keyPath:"id"});a&&await Promise.all(a.map((e=>r.createIndex(e,e))))},i.onsuccess=e=>{this.#r=e.target.result,r(!0)}}catch(e){s(e)}}));#i=async e=>(await this.#r.transaction(e,"readwrite")).objectStore(e);creates=async(e,t)=>{const a=await this.#i(e);let r;try{return r=await a.add(t),await new Promise(((e,t)=>{r.onsuccess=()=>e(!0),r.onerror=e=>{throw new Error(e)}})),r.result}catch(e){return e}};reads=async(e,t)=>{const a=await this.#i(e);let r;try{return r=await a.get(t),await new Promise(((e,t)=>{r.onsuccess=()=>e(!0),r.onerror=e=>{throw new Error(e)}})),r.result}catch(e){return e}};updates=async(e,t)=>{if(!await this.reads(e,t.id))throw new Error("A record must exist before you can update it");const a=await this.#i(e);let r;try{return r=await a.put(t),await new Promise(((e,t)=>{r.onsuccess=()=>e(!0),r.onerror=e=>{throw new Error(e)}})),r.result}catch(e){return e}};deletes=async(e,t)=>{const a=await this.#i(e);let r;try{return r=await a.delete(t),await new Promise(((e,t)=>{r.onsuccess=()=>e(!0),r.onerror=e=>{throw new Error(e)}})),r.result}catch(e){return e}};searches=async(e,t,a)=>{const r=await this.#i(e);let s;try{let e=r.index(t);return s=await e.getAll(a),await new Promise(((e,t)=>{s.onsuccess=()=>e(!0),s.onerror=e=>{throw console.log({e}),new Error(e)}})),s.result}catch(e){return e}}}class s{#n=e=>(new TextEncoder).encode(e);#o=e=>new TextDecoder("utf-8").decode(e);#c=e=>{const t=new Uint8Array(e);let a="";for(const e of t)a+=String.fromCharCode(e);return btoa(a).replace(/\+/g,"-").replace(/\//g,"_").replace(/=/g,"")};#y=e=>{const t=e.replace(/-/g,"+").replace(/_/g,"/"),a=(4-t.length%4)%4,r=t.padEnd(t.length+a,"="),s=atob(r),i=new ArrayBuffer(s.length),n=new Uint8Array(i);for(let e=0;e<s.length;e++)n[e]=s.charCodeAt(e);return i};#l=()=>void 0!==(null===window||void 0===window?void 0:window.PublicKeyCredential)&&"function"==typeof window.PublicKeyCredential;#h=e=>{const{id:t}=e;return{...e,id:this.#y(t)}};priv={};async startRegistration(e){var t=this;if(!t.#l())throw new Error("WebAuthn is not supported in this browser");let a={...e,challenge:t.#y(e.challenge),user:{...e.user,id:t.#n(e.user.id)},excludeCredentials:e.excludeCredentials.map(this.#h)};const r=await navigator.credentials.create({publicKey:a});if(!r)throw new Error("Registration was not completed");const{id:s,rawId:i,response:n,type:o}=r,c={id:s,rawId:t.#c(i),response:{attestationObject:t.#c(n.attestationObject),clientDataJSON:t.#c(n.clientDataJSON)},type:o,clientExtensionResults:r.getClientExtensionResults()};return"function"==typeof n.getTransports&&(c.transports=n.getTransports()),c}async startAuthentication(e){var t,a,r=this;if(!r.#l())throw new Error("WebAuthn is not supported in this browser");let s;0!==(null===(t=e.allowCredentials)||void 0===t?void 0:t.length)&&(s=null===(a=e.allowCredentials)||void 0===a?void 0:a.map((e=>this.#h(e))));const i={...e,challenge:r.#y(e.challenge),allowCredentials:s},n=await navigator.credentials.get({publicKey:i});if(!n)throw new Error("Authentication was not completed");const{id:o,rawId:c,response:y,type:l}=n;let h;return y.userHandle&&(h=r.#o(y.userHandle)),{id:o,rawId:r.#c(c),response:{authenticatorData:r.#c(y.authenticatorData),clientDataJSON:r.#c(y.clientDataJSON),signature:r.#c(y.signature),userHandle:h},type:l,clientExtensionResults:n.getClientExtensionResults()}}async platformAuthenticatorIsAvailable(){return!!browserSupportsWebauthn()&&PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable()}}async function i(e,t,r,s,i,n){const o=new a;let c={apiData:{associationKey:"WEBSOCKET-TEST-SCRIPT",publicUserId:"public-User-ID"},browserData:{...await o.HKDFEncrypt(t,s.browserPublicKey,btoa(JSON.stringify(e))),publicKey:r},errorMsg:"",errors:!1},y={mode:"cors",method:"POST",body:JSON.stringify({...c,__salt:s.__salt,__hash:s.__hash})};await fetch(`https://${n}.api.keyri.com/api/v1/session/${i}`,y).then((async e=>await e.json())),window.close()}async function n(e,t,r,n,o,c){console.log({userParameters:e,keys:t,sessionId:r,sessionData:n,env:o,local:c});const y=new a;let l=btoa(JSON.stringify({timestamp:(new Date).getTime(),publicKey:t.signingKeys.publicKey})),h=await y.EcSignData(t.signingKeys.privateKey,l),p={challenge:btoa(JSON.stringify({data:l,signature:h,publicKey:t.signingKeys.publicKey})),rpId:document.location.host,userVerification:"discouraged",attestation:!1,timeout:6e4,requireResidentKey:!0};window.focus();const u=new s,w=await u.startAuthentication(p);let d=await fetch("https://c4xfkg8ea4.execute-api.us-east-2.amazonaws.com/prod/v1/browser/verify/",{method:"POST",mode:"cors",headers:{"Content-Type":"application/json"},body:JSON.stringify(w)}).then((async e=>await e.json()));if(!1!==c)return d;d.validationFormat="keyri-appless",await i(d,t.encryptionKeys.privateKey,t.encryptionKeys.publicKey,n,r,o)}class o{#r;#p;#u;#w;#d=!1;#e;#b;#K;#m={signingKeys:{},encryptionKeys:{}};constructor(e){this.#p=e,this.#r=new r,this.#e=new a,this.#w=new EventTarget}on=(e,t)=>{this.#w.addEventListener(e,t)};#g=(e,t)=>{this.#w.dispatchEvent(new CustomEvent(e,{detail:t}))};register=async(e=!1)=>await this.#f({registration:e});authenticate=async()=>{try{return await n(void 0,this.#m,void 0,void 0,this.#p,void 0)}catch(e){console.log({ERROR:e})}};set passwordHandler(e){this.#K=e}start=async(e=!1)=>{this.#d=e;const{signingKeys:t,encryptionKeys:s}=await async function(){let e,t,s=new r,i=new a;await s.start("mobile","credentials");try{e=await s.reads("credentials","signingKeys"),t=await s.reads("credentials","encryptionKeys")}catch(e){throw new Error(e)}if(void 0===e){e=await i.EcMakeSigKeys(!1),e.id="signingKeys",t=await i.EcMakeCryptKeys(!1),t.id="encryptionKeys";try{await s.creates("credentials",e),await s.creates("credentials",t)}catch(e){throw new Error(e)}}return{signingKeys:e,encryptionKeys:t}}();if(this.#m.signingKeys=t,this.#m.encryptionKeys=s,!this.#d){const{sessionData:a,sessionId:r,userParameters:s}=await async function(e,t){let a,r,s=Object.fromEntries(Array.from(new URL(document.location).searchParams)).sessionId;if(!s)throw new Error("No Session Id Provided");let i={mode:"cors",method:"GET",headers:new Headers({"x-mobile-id":e})},n=`https://${t}.api.keyri.com/api/v1/session/${s}`;if(a=await fetch(n,i),!1===a?.ok)throw a=await a.json(),new Error(a.message);return a=await a.json(),r=atob(a?.userParameters?.base64EncodedData),r=JSON.parse(r),{sessionData:a,userParameters:r,sessionId:s}}(t.publicKey,this.#p);if(this.#u=r,this.#b=a,"true"==s?.register)return await this.#f(s);try{return await n(s,this.#m,r,a,this.#p,e)}catch(e){console.log({ERROR:e})}}};#f=async e=>{let t,a=e.registration;t=this.#K?await this.#K():"";try{e.registration=await this.#e.PASSWORD_DECRYPT(t,a.data)}catch(e){throw console.log("DATA DECRYPTION FAILED. WOMP WOMP!",{e}),new Error("PASSWORD DECRYPTION FAILED.")}let r=JSON.parse(e.registration),n=JSON.parse(atob(r.data)),o=JSON.parse(atob(n.child.data)),c=JSON.parse(atob(o.child.data)),y={child:r,publicKey:this.#m.signingKeys.publicKey,timestamp:(new Date).getTime()};y=btoa(JSON.stringify(y));let l=await this.#e.EcSignData(this.#m.signingKeys.privateKey,y),h=JSON.stringify({data:y,signature:l});console.log({userParameters:e,mobileData:y,browserTwo:n,rpData:o,browserData:c}),e.registration=btoa(h);let p={challenge:e.registration,rp:{name:o.origin,id:o.origin},user:{id:o.userId,name:o.userDisplayName,displayName:o.userDisplayName},pubKeyCredParams:[{alg:-7,type:"public-key"},{alg:-257,type:"public-key"}],timeout:6e4,attestation:"none",excludeCredentials:[],authenticatorSelection:{requireResidentKey:!0,userVerification:"discouraged"}};return await async function(e,t,a,r,n,o){{const c=new s;window.focus();let y=e.userParameters,l=e?.authoptions,h=await c.startRegistration(l),p=await fetch("https://c4xfkg8ea4.execute-api.us-east-2.amazonaws.com/prod/v1/browser/register/",{method:"POST",mode:"cors",headers:{"Content-Type":"application/json"},body:JSON.stringify({authenticatorData:h,userParameters:y})}).then((async e=>await e.json()));if(o)return p;await i(p,t.encryptionKeys.privateKey,t.encryptionKeys.publicKey,a,r,n)}}({authoptions:p,userParameters:e},this.#m,this.#b,this.#u,this.#p,this.#d)}}window.ApplessMobile=t.default})();
//# sourceMappingURL=appless-mobile.min.js.map